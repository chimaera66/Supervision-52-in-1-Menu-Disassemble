MEMORY {
	# RAM
    ZP:        start = $00,   size = $0100, type = rw, file = "";
    OAM:       start = $0200, size = $0100, type = rw, file = "";
    RAM:       start = $0300, size = $0500, type = rw, file = "";
    # ROM
    HDR:       start = $0000, size = $0010, type = ro, file = %O, fill = yes, fillval = $00;
    PRG:       start = $C000, size = $4000, type = ro, file = %O, fill = yes, fillval = $FF;
    CHR:       start = $0000, size = $2000, type = ro, file = %O, fill = yes, fillval = $00;
}

SEGMENTS {
    ZEROPAGE:  load = ZP,  type = zp;
    OAM:       load = OAM, type = bss, align = $100;
    BSS:       load = RAM, type = bss;

    HEADER:    load = HDR, type = ro;

    RESETVA:   load = PRG, type = ro,  start = $C000;
    BINA:      load = PRG, type = ro,  start = $C006;
    RESETVB:   load = PRG, type = ro,  start = $C014;
    BINB:      load = PRG, type = ro,  start = $C01A;
    RESETVC:   load = PRG, type = ro,  start = $C184;
    BINC:      load = PRG, type = ro,  start = $C18A;
    RESETVD:   load = PRG, type = ro,  start = $C258;
    BIND:      load = PRG, type = ro,  start = $C25E;
    RESETVE:   load = PRG, type = ro,  start = $C649;
    BINE:      load = PRG, type = ro,  start = $C64F;
    RESETVF:   load = PRG, type = ro,  start = $C66E;
    BINF:      load = PRG, type = ro,  start = $C674;
    RESETVG:   load = PRG, type = ro,  start = $C79E;
    BING:      load = PRG, type = ro,  start = $C7A4;
    RESETVH:   load = PRG, type = ro,  start = $CA43;
    BINH:      load = PRG, type = ro,  start = $CA49;
    GALAXIANA: load = PRG, type = ro,  start = $D000;
    CODEA:     load = PRG, type = ro,  start = $D07B;
    BINI:      load = PRG, type = ro,  start = $D099;
    CODEB:     load = PRG, type = ro,  start = $D0A3;
    RODATAA:   load = PRG, type = ro,  start = $D550;
    CODEC:     load = PRG, type = ro,  start = $D969;
    RODATAB:   load = PRG, type = ro,  start = $D9F2;
    BINJ:      load = PRG, type = ro,  start = $DD41;
    GALAXIANB: load = PRG, type = ro,  start = $E000;
    #RESETVI:   load = PRG, type = ro,  start = $FF93;
    RESETVJ:   load = PRG, type = ro,  start = $FFF2;

    VECTORS:   load = PRG, type = ro,  start = $FFFA;

    TILES:     load = CHR, type = ro;
}
